generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Panel {
  id        Int     @id @default(autoincrement())
  direction String
  linktext  String
  linkhref  String
  excerpt   String
  title     String  @unique
  photos    Photo[]
}

// model UserTokens {
//   id           String   @id @default(cuid())
//   refreshToken String
//   family       String   @unique
//   browserInfo  String?
//   expiresAt    DateTime
//   createdAt    DateTime @default(now())

//   userId String
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model Photo {
  id      String    @id @default(cuid())
  height  Int
  width   Int
  url     String
  alt     String
  Product Product[]
  Panel   Panel[]
}

model Product {
  id                 String     @id @default(cuid())
  name               String     @unique
  urlName            String     @unique
  basePrice          Float
  discountPercentage Int        @default(0)
  stock              Int        @default(0)
  description        String?
  createdAt          DateTime   @default(now())
  photos             Photo[]
  categories         Category[]
  CartItem           CartItem[]
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(0)
  createdAt DateTime @default(now())

  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?  @unique
  Cart      Cart?    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String?
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model User {
//   id           String   @id @default(cuid())
//   email        String   @unique
//   cartActiveID String
//   password     String
//   loggedIn     Boolean  @default(false)
//   name         String?
//   address      String?
//   role         Role     @default(USER)
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @default(now())

//   Carts      Cart[]
//   UserTokens UserTokens[]
// }

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Carts         Cart[]
}

model Cart {
  id        String     @id @default(cuid())
  CartItems CartItem[]
  userId    String?
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
